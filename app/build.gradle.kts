/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.serialization)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

version = "0.0.1-alpha"
group = "com.skommy"
description = "Lightweight and simple JVM-only Kotlin build tool"

repositories {
    mavenCentral()
}

dependencies {
    // Main
    implementation(libs.kotlinx.serialization)
    implementation(libs.kotlinx.serialization.yaml)
    implementation(libs.ajalt.clikt)

    // Compiler
    implementation(libs.kotlin.compiler.embeddable)

    // Test
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation(libs.junit.jupiter.engine)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.skommy.MainKt"
    executableDir = "bin"
    applicationName = "lizz"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register("generateBuildConfig") {
    group = "lizz Tasks"
    description = "Generate build config with preconfigured values"

    val generatedDir = layout.buildDirectory.dir("generated/buildconfig")
    val version = project.version.toString()
    outputs.dir(generatedDir)

    doLast {
        generatedDir.get().asFile.mkdirs()
        val file = generatedDir.get().file("BuildConfig.kt").asFile
        file.writeText(
            """
                object BuildConfig {
                    const val VERSION = "$version"
                }
            """.trimIndent()
        )
    }
}

tasks.named("compileKotlin") {
    dependsOn("generateBuildConfig")
}

kotlin.sourceSets.main {
    kotlin.srcDir(layout.buildDirectory.dir("generated/buildconfig"))
}

tasks.register<Sync>("devDist") {
    group       = "lizz tasks"
    description = "Installs binary to \$HOME/.local/lizz"

    dependsOn(tasks.named("installDist"))

    from(layout.buildDirectory.dir("install/${project.application.applicationName}"))
    into(providers.environmentVariable("HOME").map { "$it/.local/lizz" })

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}